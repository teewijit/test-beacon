const express = require("express");
const fs = require("fs");
const path = require("path");
const https = require("https");
const moment = require('moment');
const schedule = require('node-schedule');

const app = express();
app.use(express.json());

const filePath = path.join(__dirname, "events.txt");
const filePath_campaign = path.join(__dirname, "campaign.txt");

const _token = "Fsyb6SfP42tAxgljMbFGiZtGPuJBxcmRYHgsFFWrm8SYuaiWcXKas+Y3P8ZugasaH8sSphm0BVFdWukuaqbXTkhfD7OgEeNe7rp95xzhl/Tsh4+Ct1kegwvCe8723DjPpd0L3ay3nuxucJEyyMb0wgdB04t89/1O/w1cDnyilFU="

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö jobs ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
const activeJobs = new Map();

// ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á SSL ‡∏Ç‡∏≠‡∏á Let's Encrypt
const sslOptions = {
  key: fs.readFileSync("/etc/letsencrypt/live/9net-beacon.mungkud.me/privkey.pem"),
  cert: fs.readFileSync("/etc/letsencrypt/live/9net-beacon.mungkud.me/fullchain.pem")
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á UUID ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0; // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç 0-15
    const v = c === 'x' ? r : (r & 0x3 | 0x8); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á UUID
    return v.toString(16);
  });
}

// ‚úÖ **‡πÄ‡∏û‡∏¥‡πà‡∏° /test ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**
app.get("/test", (req, res) => {
  res.json({ status: "success", message: "üöÄ Server is running!" });
});

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü index.html ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü campaign ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î /campaign
app.get("/campaign", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "form", "index.html"));
});

// ‡∏£‡∏±‡∏ö id ‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç campaign ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ campaign
app.get("/campaign/:id", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "form", "index.html"));
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/campaign", (req, res) => {
  fs.readFile(filePath_campaign, "utf8", (err, data) => {
    if (err) {
      return res.status(500).json({ error: "Error reading file" });
    }

    try {
      const campaign = data
        .split('\n\n')
        .filter(text => text.trim())
        .map(text => JSON.parse(text))
        .reverse();

      res.json(campaign);
    } catch (error) {
      res.status(500).json({ error: "Error parsing campaign data" });
    }
  });
});

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ï‡∏≤‡∏° id
app.get('/api/campaign/:id', (req, res) => {
  const campaignId = req.params.id;

  fs.readFile(filePath_campaign, "utf8", (err, data) => {
    if (err) {
      return res.status(500).json({ error: "Error reading file" });
    }

    try {
      const campaigns = data
        .split('\n\n')
        .filter(text => text.trim())
        .map(text => JSON.parse(text));

      const campaign = campaigns.find(campaign => campaign.id === campaignId);

      if (!campaign) {
        return res.status(404).json({ error: "Campaign not found" });
      }

      res.json(campaign);
    } catch (error) {
      res.status(500).json({ error: "Error parsing campaign data" });
    }
  });
});

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç campaign
app.post("/campaign.save", async function (req, res) {
  try {
    const data = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ data ‡∏´‡∏£‡∏∑‡∏≠ id ‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!data || !data.id) {
      return res.status(400).send("Missing id in request body");
    }

    const campaignId = data.id;

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    fs.readFile(filePath_campaign, "utf8", (err, fileData) => {
      if (err) {
        return res.status(500).send("Error reading file");
      }

      let campaigns = [];
      if (fileData.trim()) {
        try {
          campaigns = fileData
            .split('\n\n')
            .filter((text) => text.trim())
            .map((text) => JSON.parse(text));
        } catch (parseError) {
          return res.status(500).send("Error parsing file data");
        }
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ campaign ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö id ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
      const existingCampaignIndex = campaigns.findIndex(
        (campaign) => campaign.id === campaignId
      );

      let updatedCampaign = null;
      if (existingCampaignIndex !== -1) {
        // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö campaign ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const oldCampaign = campaigns[existingCampaignIndex];
        updatedCampaign = { ...oldCampaign, ...data };
        campaigns[existingCampaignIndex] = updatedCampaign;
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö campaign ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        updatedCampaign = data;
        campaigns.push(updatedCampaign);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå
      fs.writeFile(filePath_campaign, campaigns.map(campaign => JSON.stringify(campaign, null, 2)).join("\n\n"), (writeErr) => {
        if (writeErr) {
          return res.status(500).send("Error writing to file");
        }

        // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï job ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        updateCampaignJobs(updatedCampaign);

        res.send("Data saved successfully");
      });
    });
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    res.status(500).send("Internal server error");
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï jobs ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
function updateCampaignJobs(updatedCampaign) {
  try {
    const campaignId = updatedCampaign.id;
    const currentTime = moment();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
    const startDateTime = moment(`${updatedCampaign.d_start} ${updatedCampaign.d_start_time}`, 'YYYY-MM-DD HH:mm');
    const endDateTime = moment(`${updatedCampaign.d_end} ${updatedCampaign.d_end_time}`, 'YYYY-MM-DD HH:mm');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏¢‡∏±‡∏á active ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isActive = updatedCampaign.e_status === 'active' &&
      currentTime.isBetween(startDateTime, endDateTime, null, '[]');

    console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï jobs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaignId}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isActive ? 'active' : 'inactive'}`);

    // ‡∏´‡∏≤ jobs ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ô‡∏µ‡πâ
    const relatedJobKeys = [];
    for (const [jobKey, job] of activeJobs.entries()) {
      if (jobKey.endsWith(`-${campaignId}`)) {
        relatedJobKeys.push(jobKey);
      }
    }

    // ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç inactive ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å jobs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (!isActive) {
      relatedJobKeys.forEach(jobKey => {
        const job = activeJobs.get(jobKey);
        if (job) {
          console.log(`‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job ${jobKey} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÑ‡∏°‡πà active ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤`);
          job.cancel();
          activeJobs.delete(jobKey);
        }
      });
      return;
    }

    // ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏¢‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï jobs
    const intervalMinutes = parseInt(updatedCampaign.c_seq);
    if (isNaN(intervalMinutes) || intervalMinutes <= 0) {
      console.error(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaignId}`);
      return;
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö jobs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
    relatedJobKeys.forEach(jobKey => {
      const [userId] = jobKey.split('-');

      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job ‡πÄ‡∏î‡∏¥‡∏°
      const oldJob = activeJobs.get(jobKey);
      if (oldJob) {
        console.log(`‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job ${jobKey} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ${intervalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        oldJob.cancel();
        activeJobs.delete(jobKey);
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á job ‡πÉ‡∏´‡∏°‡πà
      const newJob = schedule.scheduleJob(`*/${intervalMinutes} * * * *`, function () {
        const now = moment();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (now.isSameOrAfter(endDateTime)) {
          console.log(`‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaignId} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job`);
          newJob.cancel();
          activeJobs.delete(jobKey);
          return;
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        sendCampaignMessage(userId, updatedCampaign);
      });

      // ‡πÄ‡∏Å‡πá‡∏ö job ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô map
      activeJobs.set(jobKey, newJob);
    });

  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï jobs:", error);
  }
}

// ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ï‡∏≤‡∏° id
app.get('/api/campaign/del/:id', (req, res) => {
  const campaignId = req.params.id;

  fs.readFile(filePath_campaign, "utf8", (err, data) => {
    if (err) {
      return res.status(500).json({ error: "Error reading file" });
    }

    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô array
      const campaigns = data
        .split('\n\n')
        .filter(text => text.trim())
        .map(text => JSON.parse(text));

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö campaignId
      const campaignIndex = campaigns.findIndex(campaign => campaign.id === campaignId);

      if (campaignIndex === -1) {
        return res.status(404).json({ error: "Campaign not found" });
      }

      // ‡∏•‡∏ö campaign ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array
      campaigns.splice(campaignIndex, 1);

      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå
      fs.writeFile(filePath_campaign, campaigns.map(campaign => JSON.stringify(campaign, null, 2)).join("\n\n"), (writeErr) => {
        if (writeErr) {
          return res.status(500).json({ error: "Error writing to file" });
        }

        res.json({ message: "Campaign deleted successfully" });
      });

    } catch (error) {
      res.status(500).json({ error: "Error parsing campaign data" });
    }
  });
});

// Webhook ‡∏£‡∏±‡∏ö event ‡∏à‡∏≤‡∏Å LINE
app.post("/webhook", async function (req, res) {
  try {
    const event = req.body.events?.[0];

    if (!event) {
      return res.status(400).send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• event");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID ‡πÅ‡∏•‡∏∞ timestamp
    const eventInput = {
      ...event,
      uuid: generateUUID(),
      timestamp: moment().format(),
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å event ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    fs.appendFile(filePath, JSON.stringify(eventInput, null, 2) + "\n\n", (err) => {
      if (err) {
        console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ", err);
        return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    await setupCampaignSchedules(eventInput);

    res.status(200).send(eventInput);

  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ", error);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getCampaigns() {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath_campaign, "utf8", (err, data) => {
      if (err) {
        return reject("Error reading file");
      }

      try {
        const campaigns = data
          .split('\n\n')
          .filter(text => text.trim())
          .map(text => JSON.parse(text));

        resolve(campaigns);
      } catch (error) {
        reject("Error parsing campaign data");
      }
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schedules ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà active ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
async function setupCampaignSchedules(eventInput) {
  try {
    const campaigns = await getCampaigns();
    const userId = eventInput.source?.userId;

    if (!userId) {
      console.error("‡πÑ‡∏°‡πà‡∏û‡∏ö userId ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• event");
      return;
    }

    const currentTime = moment();

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
    const relevantCampaigns = campaigns.filter(campaign => {
      if (campaign.e_status !== 'active') return false;

      const startDateTime = moment(`${campaign.d_start} ${campaign.d_start_time}`, 'YYYY-MM-DD HH:mm');
      const endDateTime = moment(`${campaign.d_end} ${campaign.d_end_time}`, 'YYYY-MM-DD HH:mm');

      // ‡∏£‡∏ß‡∏°‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
      const isActive = currentTime.isBetween(startDateTime, endDateTime, null, '[]');

      // ‡∏£‡∏ß‡∏°‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
      const isUpcoming = startDateTime.isSameOrAfter(currentTime) &&
        endDateTime.isSameOrAfter(currentTime);

      return isActive || isUpcoming;
    });

    const activeCampaigns = relevantCampaigns.filter(campaign => {
      const startDateTime = moment(`${campaign.d_start} ${campaign.d_start_time}`, 'YYYY-MM-DD HH:mm');
      const endDateTime = moment(`${campaign.d_end} ${campaign.d_end_time}`, 'YYYY-MM-DD HH:mm');
      return currentTime.isBetween(startDateTime, endDateTime, null, '[]');
    });

    const upcomingCampaigns = relevantCampaigns.filter(campaign => {
      const startDateTime = moment(`${campaign.d_start} ${campaign.d_start_time}`, 'YYYY-MM-DD HH:mm');
      const endDateTime = moment(`${campaign.d_end} ${campaign.d_end_time}`, 'YYYY-MM-DD HH:mm');

      return startDateTime.isSameOrAfter(currentTime) &&  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        endDateTime.isSameOrAfter(currentTime);     // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    });


    console.log(`‡∏û‡∏ö ${activeCampaigns.length} ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà active ‡πÅ‡∏•‡∏∞ ${upcomingCampaigns.length} ‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï`);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schedule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active
    for (const campaign of activeCampaigns) {
      setupActiveCampaignJob(userId, campaign);
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schedule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    for (const campaign of upcomingCampaigns) {
      setupUpcomingCampaignJob(userId, campaign);
    }

  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ schedules:", error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active
function setupActiveCampaignJob(userId, campaign) {
  const jobKey = `${userId}-${campaign.id}`;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ job ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (activeJobs.has(jobKey)) {
    console.log(`‡∏°‡∏µ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${jobKey} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà`);
    return;
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
  const endDateTime = moment(`${campaign.d_end} ${campaign.d_end_time}`, 'YYYY-MM-DD HH:mm');

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (c_seq ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡∏ó‡∏µ)
  const intervalMinutes = parseInt(campaign.c_seq);

  if (isNaN(intervalMinutes) || intervalMinutes <= 0) {
    console.error(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaign.id}`);
    return;
  }

  console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaign.id} ‡∏ó‡∏∏‡∏Å ${intervalMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà
  const job = schedule.scheduleJob(`*/${intervalMinutes} * * * *`, function () {
    const now = moment();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (now.isSameOrAfter(endDateTime)) {
      console.log(`‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaign.id} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job`);
      job.cancel();
      activeJobs.delete(jobKey);
      return;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    sendMessageToLine(userId, campaign.c_data);
  });

  // ‡πÄ‡∏Å‡πá‡∏ö job ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô map
  activeJobs.set(jobKey, job);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  sendMessageToLine(userId, campaign.c_data);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
function setupUpcomingCampaignJob(userId, campaign) {
  const startJobKey = `start-${userId}-${campaign.id}`;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (activeJobs.has(startJobKey)) {
    console.log(`‡∏°‡∏µ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${startJobKey} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà`);
    return;
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
  const startDateTime = moment(`${campaign.d_start} ${campaign.d_start_time}`, 'YYYY-MM-DD HH:mm');

  console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaign.id} ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${startDateTime.format('YYYY-MM-DD HH:mm')}`);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
  const startJob = schedule.scheduleJob(startDateTime.toDate(), function () {
    console.log(`‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaign.id} ‡πÅ‡∏•‡πâ‡∏ß, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
    startJob.cancel();
    activeJobs.delete(startJobKey);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç
    setupActiveCampaignJob(userId, campaign);
  });

  // ‡πÄ‡∏Å‡πá‡∏ö job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡πÑ‡∏ß‡πâ‡πÉ‡∏ô map
  activeJobs.set(startJobKey, startJob);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å jobs ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
schedule.scheduleJob('0 * * * *', async function () {
  console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö jobs ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏...');

  const currentTime = moment();
  const campaigns = await getCampaigns();

  for (const [jobKey, job] of activeJobs.entries()) {
    const [userId, campaignId] = jobKey.split('-');
    const campaign = campaigns.find(c => c.id === campaignId);

    if (!campaign || campaign.e_status !== 'active') {
      console.log(`‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaignId} ‡πÑ‡∏°‡πà active ‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job`);
      job.cancel();
      activeJobs.delete(jobKey);
      continue;
    }

    const endDateTime = moment(`${campaign.d_end} ${campaign.d_end_time}`, 'YYYY-MM-DD HH:mm');

    if (currentTime.isSameOrAfter(endDateTime)) {
      console.log(`‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç ${campaignId} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å job`);
      job.cancel();
      activeJobs.delete(jobKey);
    }
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API
async function sendMessageToLine(userId, message) {
  if (!userId || userId.trim() === '') {
    console.error("Error: userId is missing or empty");
    return;
  }

  const channelAccessToken = _token; // ‡πÉ‡∏™‡πà Channel Access Token ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE Developers
  console.log('Message:', message);

  const data = JSON.stringify({
    to: userId,
    messages: [
      {
        type: 'text',
        text: message
      }
    ]
  });

  const options = {
    hostname: 'api.line.me',
    path: '/v2/bot/message/push',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${channelAccessToken}`
    }
  };

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API
  const req = https.request(options, (res) => {
    let data = '';

    res.on('data', (chunk) => {
      data += chunk;
    });

    res.on('end', () => {
      console.log('Response:', data);
    });
  });

  req.on('error', (e) => {
    console.error('Error:', e);
  });

  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á request
  req.write(data);

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
  req.end();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• campaign ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function getCampaigns() {
  return new Promise((resolve, reject) => {
    fs.readFile(filePath_campaign, "utf8", (err, data) => {
      if (err) {
        return reject("Error reading file");
      }

      try {
        const campaigns = data
          .split('\n\n')
          .filter(text => text.trim())
          .map(text => JSON.parse(text));

        resolve(campaigns);
      } catch (error) {
        reject("Error parsing campaign data");
      }
    });
  });
}

// API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• events
app.get("/api/events", (req, res) => {
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      return res.status(500).json({ error: "Error reading file" });
    }

    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á objects
      const events = data
        .split('\n\n')
        .filter(text => text.trim())
        .map(text => JSON.parse(text))
        .reverse(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤

      res.json(events);
    } catch (error) {
      res.status(500).json({ error: "Error parsing events data" });
    }
  });
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå HTTPS
const PORT = process.env.PORT || 25680;
https.createServer(sslOptions, app).listen(PORT, () => {
// app.listen(PORT, () => {
  console.log(`üöÄ HTTPS Server running on https://9net-beacon.mungkud.me:${PORT}`);
});
